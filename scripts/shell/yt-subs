#!/usr/bin/env bash

# Path to the configuration file containing OAuth 2.0 credentials
config_file="$HOME/.local/share/apis/YT_PRIVATE_KEY"

# Check if the configuration file exists
if [[ ! -f "$config_file" ]]; then
  echo "Configuration file not found: $config_file"
  exit 1
fi

# Source the configuration file to load OAuth 2.0 credentials
source "$config_file"

# Check if OAuth 2.0 credentials are set
if [[ -z "$CLIENT_ID" || -z "$CLIENT_SECRET" ]]; then
  echo "OAuth 2.0 credentials not set correctly in $config_file"
  exit 1
fi

# Obtain access token using client credentials grant type
response=$(curl -s -d "client_id=${CLIENT_ID}&client_secret=${CLIENT_SECRET}&grant_type=client_credentials" https://oauth2.googleapis.com/token)

# Extract access token from response
access_token=$(echo "$response" | jq -r '.access_token')

# Check if access token is obtained
if [[ -z "$access_token" ]]; then
  echo "Failed to obtain access token. Check your OAuth 2.0 credentials."
  exit 1
fi

# Define API request URL for subscription feed
urlstring="https://www.googleapis.com/youtube/v3/activities?part=snippet,contentDetails&mine=true&maxResults=20&access_token=${access_token}"

# Get videos from subscription feed
video_url=$(curl -s "${urlstring}" \
  | jq -r '.items[] | select(.snippet.type == "upload") | "\(.snippet.channelTitle) => \(.snippet.title) youtu.be/\(.contentDetails.upload.videoId)"' \
  | fzf --with-nth='1..-2' +m \
  | awk '{print $NF}')

# Open selected video in mpv
if [[ -n "$video_url" ]]; then
  mpv "$video_url"
else
  echo "No video selected or no videos in subscription feed."
fi

